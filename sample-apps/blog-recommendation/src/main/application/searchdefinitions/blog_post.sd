search blog_post {
    document blog_post {
        field date_gmt type string {
            indexing: summary
        }
        field language type string {
            indexing: summary
        }

        field author type string {
            indexing: summary
        }

        field url type string {
            indexing: summary
        }

        field title type string {
            indexing: summary | index
        }

	    field blog type string {
	        indexing: summary
	    }

	    field post_id type string {
	        indexing: summary
	    }

        field tags type array<string> {
            indexing: summary
        }

        field blogname type string {
            indexing: summary
        }

        field content type string {
            indexing: summary | index
        }

        field categories type array<string> {
            indexing: summary | index
        }

        field user_item_cf type tensor {
            indexing: summary | attribute
            attribute: tensor(user_item_cf[10])
        }

        field has_user_item_cf type byte {
            indexing: summary | attribute
            attribute: fast-search
        }

    }

    rank-profile default {
        first-phase {
            expression {
                sum(query(user_item_cf) * attribute(user_item_cf))
            }
        }
    }

    constant W_hidden {
        file: constants/W_hidden.json
        type: tensor(input[20],hidden[40])
    }

    constant b_hidden {
        file: constants/b_hidden.json
        type: tensor(hidden[40])
    }

    constant W_final {
        file: constants/W_final.json
        type: tensor(hidden[40], final[1])
    }

    constant b_final {
        file: constants/b_final.json
        type: tensor(final[1])
    }

    constant input_transform_1 {
        file: constants/input_transform_1.json
        type: tensor(user_item_cf[10], input[20])
    }

    constant input_transform_2 {
        file: constants/input_transform_2.json
        type: tensor(user_item_cf[10], input[20])
    }

    macro matmul(x, y, dim) {
        expression: sum(x * y, dim)
    }

    # The input to the neural network is the concatenation of the document and query vectors
    macro nn_input() {
        expression {
            matmul(attribute(user_item_cf), constant(input_transform_1), "user_item_cf")
            +
            matmul(query(user_item_cf), constant(input_transform_2), "user_item_cf")
        }
    }

    macro hidden_layer() {
        expression: relu(matmul(nn_input, constant(W_hidden), "input") + constant(b_hidden))
    }

    macro final_layer() {
        expression: sigmoid(matmul(hidden_layer, constant(W_final), "hidden") + constant(b_final))
    }

    rank-profile nn_tensor {
        first-phase {
            expression {
                sum(final_layer)
            }
        }
    }

}
