search blog_post {
    document blog_post {
        field date_gmt type string {
            indexing: summary
        }
        field language type string {
            indexing: summary
        }

        field author type string {
            indexing: summary
        }

        field url type string {
            indexing: summary
        }

        field title type string {
            indexing: summary | index
        }

	    field blog type string {
	        indexing: summary
	    }

	    field post_id type string {
	        indexing: summary
	    }

        field tags type array<string> {
            indexing: summary
        }

        field blogname type string {
            indexing: summary
        }

        field content type string {
            indexing: summary | index
        }

        field categories type array<string> {
            indexing: summary | index
        }

        field user_item_cf type tensor {
            indexing: summary | attribute
            attribute: tensor(user_item_cf[10])
        }

        field has_user_item_cf type byte {
            indexing: summary | attribute
            attribute: fast-search
        }

    }

    rank-profile tensor {
        first-phase {
            expression {
                sum(query(user_item_cf) * attribute(user_item_cf))
            }
        }
    }

    constant W_hidden {
        file: constants/W_hidden.json
        type: tensor(user_item_cf[20],hidden[40]) # user_item_cf
    }

    constant b_hidden {
        file: constants/b_hidden.json
        type: tensor(hidden[40])
    }

    constant W_final {
        file: constants/W_final.json
        type: tensor(hidden[40],prob_success[1])
    }

    constant b_final {
        file: constants/b_final.json
        type: tensor(prob_success[1])
    }

    # Temporary hack: requires x and y to be 0 padded
    macro concat(x, y) {
        expression: x + y
    }

    # Not valid. Needs to be a predefined function.
    macro relu(x) {
        expression: max(0, x) # 0 should be a constant tensor with 0 values
    }

    # Not valid. Needs to be predefined function.
    macro sigmoid(x) {
        expression: 1 / (1 + exp(-x))
    }

    macro matmul(x, y, dim) {
        expression: sum(x * y, dim)
    }

    # The input to the neural network is the concatenation of the query and document vectors
    macro nn_input() {
        expression: concat(attribute(user_item_cf), query(user_item_cf))
    }

    macro hidden_layer() {
        expression: relu(matmul(nn_input, constant(W_hidden), "user_item_cf") + constant(b_hidden))
    }

    macro final_layer() {
        expression: sigmoid(matmul(hidden_layer, constant(W_final), "hidden") + constant(b_final))
    }

    rank-profile nn_tensor {
        first-phase {
            expression {
                sum(final_layer)
            }
        }
    }

}
