package com.yahoo.tensor.functions;

import com.yahoo.tensor.Tensor;
import com.yahoo.tensor.TensorType;

import java.util.List;
import java.util.Objects;
import java.util.function.Function;

/**
 * An indexed tensor whose values are generated by a function
 * 
 * @author bratseth
 */
public class GeneratedTensor extends PrimitiveTensorFunction {

    private final TensorType type;
    private final Function<List<Integer>, Double> generator;

    /**
     * Creates a generated tensor
     * 
     * @param type the type of the tensor
     * @param generator the function generating values from a list of ints specifying the indexes of the
     *                  tensor cell which will receive the value
     * @throws IllegalArgumentException if any of the tensor dimensions are not indexed bound
     */
    public GeneratedTensor(TensorType type, Function<List<Integer>, Double> generator) {
        Objects.requireNonNull(type, "The argument tensor type cannot be null");
        Objects.requireNonNull(generator, "The argument function cannot be null");
        validateType(type);
        this.type = type;
        this.generator = generator;
    }
    
    private void validateType(TensorType type) {
        for (TensorType.Dimension dimension : type.dimensions())
            if (dimension.type() != TensorType.Dimension.Type.indexedBound)
                throw new IllegalArgumentException("A generated tensor can only have indexed bound dimensions");
    }
    
    @Override
    public PrimitiveTensorFunction toPrimitive() { return this; }
    
    @Override
    public Tensor execute() {
        throw new UnsupportedOperationException("Not implemented"); // TODO
    }

    @Override
    public String toString() { return type + "(" + generator + ")"; }

}
