# Copyright 2016 Yahoo Inc. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.
namespace a = "http://relaxng.org/ns/compatibility/annotations/1.0"

include "searchchains.rnc"
include "container.rnc"

Search = element search {
   attribute version { "2.0" } &
   GenericConfig* &
   (QrserversWithClusters | QRServers)? &
   SearchDefinitions? &
   SCluster*
}

ModeStreaming = attribute indexingmode { string "streaming" | string "STREAMING" } &
                attribute storagecluster { xsd:NCName }

QRServerOptionsElems =
   element cacheoptions {
      attribute cluster { list { xsd:NCName+ } }? &
      ## Size in megabytes
      element size { xsd:nonNegativeInteger }?
   }* &
   element resultlimits {
      attribute maxhits { xsd:nonNegativeInteger }? &
      attribute maxoffset { xsd:nonNegativeInteger }? &
      attribute maxgroups { xsd:nonNegativeInteger }?
   }? &
   element accesslog { string "queryaccesslog" | string "yapacheaccesslog" | string "disabled" }?

SearchDefinitions = element searchdefinitions {
   element searchdefinition {
      attribute name { text }
   }+
}

TopLevelDispatchers = element topleveldispatchers {
   element topleveldispatcher {
      attribute preferlocalrow { text }? &
      service.attlist &
      GenericConfig*
   }+ &
   GenericConfig*
}

QRServers = element qrservers {
   GenericConfig* &
   Container &
   element qrserveroptions {
      QRServerOptionsElems
   }? &
   attribute jvmargs { text }? &
   attribute preload { text }? &
   element qrserver {
      service.attlist &
      GenericConfig*
   }+ &
   element cache {
      attribute size { xsd:string {   pattern = "\d+(\.\d*)?\s*[kmgKMG]?" } }
   }?
}

QrserversWithClusters = element qrservers {
   GenericConfig* &
   OuterSearchChains? &
   element cluster {
     attribute name { xsd:NCName } &
     GenericConfig* &
     Container &
     element qrserveroptions {
        QRServerOptionsElems
     }? &
     element nodes {
       attribute jvmargs { text }? &
       attribute preload { text }? &
       element node {
         service.attlist &
         GenericConfig*
       }+
     }+ &
     element cache {
        attribute size { xsd:string {   pattern = "\d+(\.\d*)?\s*[kmgKMG]?" } }
     }?
   }+
}

Container =
   Handler* &
   Client* &
   Server* &
   Component* &
   HttpFilter? &
   Renderer* &
   SearchChains? &
   Processing?

ModeRealTime = attribute indexingmode { string "realtime" | string "REALTIME" }

ClusterCommon = attribute name { xsd:NCName }? &
   GenericConfig* &
   ( ModeRealTime | ModeStreaming )? &
   # TODO: Rename?
   element visibilitydelay { xsd:double { minInclusive = "0.0" } }? &
   element querytimeout { xsd:double { minInclusive = "0.0" } }? &
   SearchDefinitions


Indexing = element indexing {
   attribute indexingclustername { text }? &
   attribute chain { text }? &
   #Below element is deprecated and has no effect:
   element documentprocessors {
      DocumentProcessorV3+
   }?
}

SCluster = element cluster {
   # name defaults to 'search'
   ClusterCommon &
   attribute minnodespercolumn { xsd:nonNegativeInteger }? &
   Indexing? &
   element documents {
      attribute feedname { text }?,
      # TODO: check if 'true' works for getting all, and disallow empty in selection language.
      attribute selection { text }?
   }? &
   # TODO: remove in the future...
   element resultlimits {
      attribute maxhits { xsd:nonNegativeInteger }? &
      attribute maxoffset { xsd:nonNegativeInteger }?
   }? &
   element oos {
      attribute auto { xsd:boolean } &
      attribute timeout { xsd:nonNegativeInteger }? &
      attribute min-in-service-per-column { xsd:positiveInteger }?
   }? &
   # Default is that one clustercontroller is created on a qrserver node in javacode
   element clustercontrollers {
      element clustercontroller { service.attlist & GenericConfig* }+
   }? &
   # Defaults is that two topleveldispatchers are created (one each on different
   # qrserver nodes, only one created if one qrserver node specified) in javacode
   TopLevelDispatchers? &
   element row {
      GenericConfig* &
      (attribute index { xsd:nonNegativeInteger },
      element searchnodes {
         element searchnode {
            service.attlist &
            GenericConfig* &
            attribute index { xsd:nonNegativeInteger } &
            attribute engine { text }?
         }+
      })
   }* &
   Tuning?
}

Tuning = element tuning {
   element dispatch {
      element max-hits-per-partition { xsd:nonNegativeInteger }?
   }? &
   element searchnode {
      element requestthreads {
         element search { xsd:nonNegativeInteger }? &
         element persearch { xsd:nonNegativeInteger }? &
         element summary { xsd:nonNegativeInteger }?
      }? &
      element flushstrategy {
         element native {
            element total {
               element maxmemorygain { xsd:nonNegativeInteger }? &
               element diskbloatfactor { xsd:double { minInclusive = "0.0" } }?
            }? &
            element component {
               element maxmemorygain { xsd:nonNegativeInteger }? &
               element diskbloatfactor { xsd:double { minInclusive = "0.0" } }? &
               element maxage { xsd:nonNegativeInteger }?
            }? &
            element transactionlog {
               element maxentries { xsd:nonNegativeInteger }? &
               element maxsize { xsd:nonNegativeInteger }?
            }?
         }?
      }? &
      element resizing {
         element initialdocumentcount { xsd:nonNegativeInteger }?
      }? &
      element index {
         element io {
            element write { TuningIoOptionsLight }? &
            element read { TuningIoOptionsLight }? &
            element search { TuningIoOptionsFull }?
         }
      }? &
      element attribute {
         element io {
            element write { TuningIoOptionsLight }?
         }
      }? &
      element summary {
         element io {
            element write { TuningIoOptionsLight }? &
            element read { TuningIoOptionsFull }?
         }? &
         element store {
            element cache {
               element maxsize { xsd:nonNegativeInteger }? &
               element initialentries { xsd:nonNegativeInteger }? &
               element maxentries { xsd:nonNegativeInteger }? &
               TuningCompression?
            }? &
            element logstore {
               element maxfilesize { xsd:nonNegativeInteger }? &
               element maxdiskbloatfactor { xsd:double { minInclusive = "0.0" } }? &
               element minfilesizefactor { xsd:double { minInclusive = "0.10" maxInclusive = "1.0" } }? &
               element chunk {
                  element maxsize { xsd:nonNegativeInteger }? &
                  element maxentries { xsd:nonNegativeInteger }? &
                  TuningCompression?
               }?
            }?
         }?
      }?
   }?
}

TuningIoOptionsLight = string "normal" | string "directio"
TuningIoOptionsFull = string "normal" | string "directio" | string "mmap" | string "mlock"

TuningCompression = element compression {
   element type { string "none" | string "lz4" }? &
   element level { xsd:nonNegativeInteger }?
}
