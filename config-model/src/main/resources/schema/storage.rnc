# Copyright 2017 Yahoo Holdings. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.

namespace a = "http://relaxng.org/ns/compatibility/annotations/1.0"

Storage = Storage30

# Specific v2.0 definitions

Tuning20 = element tuning {
   element cache { xsd:nonNegativeInteger }? &
   element memorytouse { xsd:nonNegativeInteger }? &
   element avgdiskspernode { xsd:nonNegativeInteger }? &
   element avgmegabytesperdisk { xsd:nonNegativeInteger }? &
   element avgdocsize { xsd:nonNegativeInteger }?
}

Datadistribution = element datadistribution {
   attribute disk { text }? &
   element diskbalancer {
     attribute start { xsd:string { pattern = "[0-9]{2}:[0-9]{2}" } } ? &
     attribute stop { xsd:string { pattern = "[0-9]{2}:[0-9]{2}" } } ? &
     attribute cycletime { xsd:string { pattern = "[0-9]{2}:[0-9]{2}" } } ? &
     attribute targetskewpercent { xsd:double { minInclusive = "0" maxInclusive = "100"} }? &
     attribute max-target-fill-rate-above-average { xsd:double { minInclusive = "-1" maxInclusive = "1"} }? &
     attribute stopontarget { xsd:boolean }?
   } ?
}

OperationsLog20 =
## File name of file to log operations to.
[ a:defaultValue = "false" ]
element operationslog { xsd:boolean }

Priority = element priority {
  attribute from { xsd:string} &
  attribute to { xsd:integer { minInclusive = "0" maxInclusive = "255" } } 
}

PriorityMapping = element prioritymapping {
  Priority+
}

Thread = element thread {
  ## The lowest priority this thread should handle.
  attribute lowest-priority { xsd:string}? &
  ## The number of threads of this type to create
  attribute count { xsd:integer }?
}

## Declare which storage threads each disk should have.
Threads = element diskthreads {
  ## Operations with priority worse than this can be blocked
  attribute highest-priority-to-block { xsd:string } ? &
  ## Operations with priority better than this can block others
  attribute lowest-priority-to-block-others { xsd:string } ? &
  Thread+
}

Visitors = element visitors {
  attribute threads { xsd:positiveInteger }? &
  attribute maxqueuesize { xsd:positiveInteger }? & 
  element maxconcurrent {
    attribute fixed { xsd:positiveInteger } &
    attribute variable { xsd:nonNegativeInteger }?
  }?
}

ClusterParamsV30 =
   ## Percentage of disk space storage will use storing documents. (Remaining used for resizing)
   element diskfullpercentage { xsd:nonNegativeInteger { minInclusive = "1" maxInclusive = "99" } }? &
   ## Whether to restart storage marking failed disks down
   element faildiskonerror { xsd:boolean }? &
   ## Time in seconds to keep all operations in case we need to revert them
   element reverttimeperiod { xsd:nonNegativeInteger }? &
   ## Time in seconds to keep remove statements for search/VDS recovery
   element recoveryperiod { xsd:nonNegativeInteger }? &
   ## Number of bits used for initial splitting.
   element staticbucketbits { xsd:integer { minInclusive = "16" maxInclusive = "58" } }? &
   ## Number of bytes per storage file.
   element bucketsplitsize { xsd:positiveInteger }? &
   ## Number of documents per storage file.
   element bucketsplitcount { xsd:positiveInteger }? &
   PriorityMapping? &
   element deviceparams {
      ## Timeout in seconds of a disk operation where storage assumes IO error (0 = never = default)
      attribute diskoperationtimeout { xsd:nonNegativeInteger }? &
      ## Not use O_DIRECT when reading from files
      element cachedio {
        ## Whether to sync after each VDS operation, default false
        attribute fsync { xsd:boolean }? 
      }? &
      ## Disk threads in storage
      Threads? 
   }? &
   GarbageCollect? &
   DeadLockDetector? &
   Visitors?
   
FleetControllers = element fleetcontrollers {
   attribute jvmargs { text }? &
   FleetControllerStats.attlist &
   FleetController20+
}

FleetController20 = element fleetcontroller {
   service.attlist &
   attribute index { xsd:nonNegativeInteger }
}

# Common definitions for v2.0 and v3.0

StorageMetrics = element metrics { element log { text }* }

Disk = element disk {
    attribute index { xsd:nonNegativeInteger } &
    attribute capacity { xsd:double { minExclusive = "0.0" } }?
}

GarbageCollect = element garbagecollect {
    attribute start { xsd:string { pattern = "[0-9]{2}:[0-9]{2}" } },
    attribute stop { xsd:string { pattern = "[0-9]{2}:[0-9]{2}" } },
    attribute full { string "monday" | string "tuesday" | string "wednesday" |
                     string "thursday" | string "friday" | string "saturday" | string "sunday" }
}

DeadLockDetector = element deadlockdetector {
    attribute enable { xsd:boolean } ? &
    attribute slack-time-period { xsd:double { minInclusive = "0.0" } }?
}

FleetController = element fleetcontroller {
   service.attlist &
   FleetControllerStats.attlist &
   attribute index { xsd:nonNegativeInteger } ?
}

FleetControllerStats.attlist =
    attribute initprogresstime { xsd:double { minExclusive = "0.0" } } ? &
    attribute transitiontime { xsd:double { minInclusive = "0.0" } } ? &
    attribute mintimebeforesettingoutofreachnodedown { xsd:double { minExclusive = "0.0" } } ? &
    attribute maxprematurecrashes { xsd:nonNegativeInteger } ? &
    attribute stablestateperiod { xsd:double { minExclusive = "0.0" } } ? &
    attribute mindistributorupcount { xsd:nonNegativeInteger } ? &
    attribute mindistributorupratio {
            xsd:double { minInclusive = "0.0" maxInclusive = "1.0" } } ? &
    attribute minstorageupcount { xsd:nonNegativeInteger } ? &
    attribute minstorageupratio {
            xsd:double { minInclusive = "0.0" maxInclusive = "1.0" } } ? &
    attribute mintimebetweenclusterstates {
            xsd:double { minInclusive = "0.0" } } ?

# v3.0 definitions
Storage30 = element storage {
   attribute version { string "3.0" } &
   GenericConfig* &
   element cluster {
      # name defaults to 'storage'
      attribute name { xsd:NCName { minLength = "1" } }? &
      ## Redundancy level - how many copies of each document are made.
      attribute redundancy { xsd:positiveInteger }? &
      attribute initial-redundancy { xsd:positiveInteger }? &
      attribute ensure-primary-persisted { xsd:boolean }? &
      attribute distributionbits { xsd:positiveInteger } ? &
      attribute distributorbaseport { xsd:unsignedShort }? &
      element forwarding { xsd:string }? &
      GenericConfig* &
      ( FleetController | FleetControllers ) &
      ClusterParamsV30? &
      StorageMetrics? &
      OperationsLog20? &
      Tuning20? &
      Merges? &
      Datadistribution? &
      TopStorageGroup
   }+
}

TopStorageGroup = element group {
     attribute index { xsd:nonNegativeInteger }? &
     attribute name { xsd:string }? &
     element disks {
       attribute num { xsd:nonNegativeInteger } &
       attribute size { xsd:string } &
       attribute iomodel {xsd:string } &
       element disk {
         attribute index { xsd:nonNegativeInteger } &
         attribute size { xsd:string }
       } *
     } ? &
     (
       (
         element distribution {
           attribute partitions { xsd:string }
         } &
         StorageGroup+
       ) |
       element node {
         service.attlist &
         attribute distributorbaseport { xsd:unsignedShort }? &
         attribute index { xsd:nonNegativeInteger } &
         attribute capacity { xsd:double { minExclusive = "0.0" } }?
       } +
     )
   }

StorageGroup = element group {
     attribute index { xsd:nonNegativeInteger } &
     attribute name { xsd:string } &
     element disks {
       attribute num { xsd:nonNegativeInteger } &
       attribute size { xsd:string } &
       attribute iomodel {xsd:string } &
       element disk {
         attribute index { xsd:nonNegativeInteger } &
         attribute size { xsd:string } 
       } *
     } ? &
     (
       (
         element distribution {
           attribute partitions { xsd:string }
         } &
         StorageGroup+
       ) |
       element node {
         service.attlist &
         attribute distributorbaseport { xsd:unsignedShort }? &
         attribute index { xsd:nonNegativeInteger } &
         attribute capacity { xsd:double { minExclusive = "0.0" } }?
       } +
     )
   }

Merges = element merges {
  attribute maxpernode { xsd:positiveInteger }? &
  attribute maxqueuesize { xsd:nonNegativeInteger }?
}
