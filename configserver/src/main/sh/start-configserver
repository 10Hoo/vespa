#!/bin/sh
# Copyright 2017 Yahoo Holdings. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.

# BEGIN environment bootstrap section
# Do not edit between here and END as this section should stay identical in all scripts

findpath () {
    myname=${0}
    mypath=${myname%/*}
    myname=${myname##*/}
    if [ "$mypath" ] && [ -d "$mypath" ]; then
        return
    fi
    mypath=$(pwd)
    if [ -f "${mypath}/${myname}" ]; then
        return
    fi
    echo "FATAL: Could not figure out the path where $myname lives from $0"
    exit 1
}

COMMON_ENV=libexec/vespa/common-env.sh

source_common_env () {
    if [ "$VESPA_HOME" ] && [ -d "$VESPA_HOME" ]; then
        export VESPA_HOME
        common_env=$VESPA_HOME/$COMMON_ENV
        if [ -f "$common_env" ]; then
            . $common_env
            return
        fi
    fi
    return 1
}

findroot () {
    source_common_env && return
    if [ "$VESPA_HOME" ]; then
        echo "FATAL: bad VESPA_HOME value '$VESPA_HOME'"
        exit 1
    fi
    if [ "$ROOT" ] && [ -d "$ROOT" ]; then
        VESPA_HOME="$ROOT"
        source_common_env && return
    fi
    findpath
    while [ "$mypath" ]; do
        VESPA_HOME=${mypath}
        source_common_env && return
        mypath=${mypath%/*}
    done
    echo "FATAL: missing VESPA_HOME environment variable"
    echo "Could not locate $COMMON_ENV anywhere"
    exit 1
}

findhost () {
    if [ "${VESPA_HOSTNAME}" = "" ] && type -t vespa-detect-hostname > /dev/null; then
	VESPA_HOSTNAME=$(vespa-detect-hostname)
    fi
    if [ "${VESPA_HOSTNAME}" = "" ]; then
        VESPA_HOSTNAME=$(hostname -f || hostname || echo "localhost") || exit 1
    fi
    validate="${VESPA_HOME}/bin/vespa-validate-hostname"
    if [ -f "$validate" ]; then
        "$validate" "${VESPA_HOSTNAME}" || exit 1
    fi
    export VESPA_HOSTNAME
}

findroot
findhost

# END environment bootstrap section

cd ${VESPA_HOME} || { echo "Cannot cd to ${VESPA_HOME}" 1>&2; exit 1; }

fixfile () {
    if [ -f $1 ]; then
        if [ "${VESPA_USER}" ] && [ "${VESPA_UNPRIVILEGED}" != yes ]; then
            chown ${VESPA_USER} $1
        fi
        chmod 644 $1
    fi
}

fixddir () {
    if ! [ -d $1 ]; then
       echo "Creating data directory $1"
       mkdir -p $1 || exit 1
    fi
    if [ "${VESPA_USER}" ] && [ "${VESPA_UNPRIVILEGED}" != yes ]; then
       chown ${VESPA_USER} $1
    fi
    chmod 755 $1
}

fixddir ${VESPA_HOME}/conf/zookeeper
fixfile ${VESPA_HOME}/conf/zookeeper/zookeeper.cfg
fixddir ${VESPA_HOME}/var/zookeeper
fixfile ${VESPA_HOME}/var/zookeeper/myid
fixddir ${VESPA_HOME}/var/zookeeper/version-2

# TODO: Remove after migrating config servers to docker containers
CONTAINER_ENVIRONMENT_PATH=/home/y/conf/container-environment
if [ -f "${CONTAINER_ENVIRONMENT_PATH}" ]
then
    echo "Sourcing ${CONTAINER_ENVIRONMENT_PATH}"
    source "${CONTAINER_ENVIRONMENT_PATH}"
fi

not_a_configserver () {
    if [ "$VESPA_CONFIGSERVERS" == localhost ]; then
	# vepsa-print-default is a binary that prints VESPA_CONFIGSERVERS
	# (split) if set
	return 1
    fi

    for hn in $(vespa-print-default configservers); do
        if [ "$hn" = localhost ] || [ "$hn" = "${VESPA_HOSTNAME}" ]; then
            return 1
        fi
    done
    return 0
}

if not_a_configserver ; then
    echo "Will not start config server, host ${VESPA_HOSTNAME}" \
         "is not part of VESPA_CONFIGSERVERS: " $(vespa-print-default configservers)
    exit 1
fi

fixlimits
checkjava

logDir="${VESPA_HOME}/logs/vespa"
fixddir "$logDir"
ZOOKEEPER_LOG_FILE="$logDir/zookeeper.configserver.log"
rm -f $ZOOKEEPER_LOG_FILE*lck

# common setup
export VESPA_LOG_TARGET="file:$logDir/vespa.log"
export VESPA_LOG_CONTROL_DIR="${VESPA_HOME}/var/db/vespa/logcontrol"
export VESPA_LOG_CONTROL_FILE="${VESPA_HOME}/var/db/vespa/logcontrol/configserver.logcontrol"
export VESPA_SERVICE_NAME=configserver

fixddir "$VESPA_LOG_CONTROL_DIR"

if [ "$VESPA_HOSTNAME" != localhost ]; then
    vespa-run-as-vespa-user ${VESPA_HOME}/libexec/vespa/start-logd
fi

# stuff for the configserver process:

appdir="${VESPA_HOME}/conf/configserver-app"
piddir="${VESPA_HOME}/var/run"
pidfile="$piddir/configserver.pid"
cfpdir="${VESPA_HOME}/var/jdisc_core"
cfpfile="$cfpdir/configserver.properties"
bundlecachedir="${VESPA_HOME}/var/vespa/bundlecache/configserver"

export JAVAVM_LD_PRELOAD=
unset LD_PRELOAD
# will be picked up by standalone-container:
export standalone_jdisc_container__app_location=${appdir}
export standalone_jdisc_container__deployment_profile=configserver

# class path
CP="${VESPA_HOME}/lib/jars/jdisc_core-jar-with-dependencies.jar"

baseuserargs="$vespa_base__jvmargs_configserver"
serveruserargs="$cloudconfig_server__jvmargs"
jvmargs="$baseuserargs $serveruserargs"

if [ "$VESPA_HOSTNAME" == localhost ]; then
    # TODO: test unprivileged?
    if [ "$VESPA_USER" != "$USER" ]; then
	echo "Running unprivileged localhost config server must be done as yourself"
	exit 1
    fi
    fixddir "$piddir"
    function vespa_runserver {
	# Start in foreground to make it much easier to avoid orphaned config
	# servers when developing on local machine.
	exec "$@"
	# "$@" &
	# local pid="$!"
	# echo "$pid" > "$pidfile"
    }
    COMMAND=(vespa_runserver)
else
    export LD_LIBRARY_PATH=${VESPA_HOME}/lib64
    #Does not need fast allocation
    export MALLOC_ARENA_MAX=1

    export LD_PRELOAD=${VESPA_HOME}/lib64/vespa/malloc/libvespamalloc.so
    COMMAND=(vespa-run-as-vespa-user vespa-runserver -s configserver -r 30 -p $pidfile --)

fi

fixddir $cfpdir
printenv > $cfpfile
fixddir $bundlecachedir

"${COMMAND[@]}" \
	java \
	-Xms128m -Xmx2048m \
        -XX:+PreserveFramePointer \
	-XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=${VESPA_HOME}/var/crash \
	-XX:+ExitOnOutOfMemoryError \
	$jvmargs \
    --illegal-access=warn \
    --add-opens=java.base/java.io=ALL-UNNAMED \
    --add-opens=java.base/java.lang=ALL-UNNAMED \
    --add-opens=java.base/java.net=ALL-UNNAMED \
    --add-opens=java.base/jdk.internal.loader=ALL-UNNAMED \
	-Djava.library.path=${VESPA_HOME}/lib64 \
	-Djava.awt.headless=true \
	-Dsun.rmi.dgc.client.gcInterval=3600000 \
	-Dsun.net.client.defaultConnectTimeout=5000 -Dsun.net.client.defaultReadTimeout=60000 \
	-Djavax.net.ssl.keyStoreType=JKS \
	-Djdisc.config.file=$cfpfile \
	-Djdisc.export.packages= \
	-Djdisc.cache.path=$bundlecachedir \
	-Djdisc.debug.resources=false \
	-Djdisc.bundle.path=${VESPA_HOME}/lib/jars \
	-Djdisc.logger.enabled=true \
	-Djdisc.logger.level=ALL \
	-Djdisc.logger.tag=jdisc/configserver \
	-Dfile.encoding=UTF-8 \
	-Dzookeeperlogfile="$ZOOKEEPER_LOG_FILE" \
	-cp "$CP" \
	com.yahoo.jdisc.core.StandaloneMain standalone-container-jar-with-dependencies.jar
