// Copyright 2016 Yahoo Inc. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.
package com.yahoo.metrics;

import junit.framework.TestCase;


public class MetricSetTest extends TestCase {

    class TestMetricVisitor extends MetricVisitor {
        String output = "";
        int setsToVisit;

        TestMetricVisitor(int setsToVisit) {
            this.setsToVisit = setsToVisit;
        }

        public boolean visitMetricSet(MetricSet set, boolean autoGenerated) {
            output += "[" + (autoGenerated ? "*" : "") + set.getName() + "]\n";
            if (setsToVisit > 0) {
                --setsToVisit;
                return true;
            }
            return false;
        }
        public boolean visitPrimitiveMetric(Metric m, boolean autoGenerated) {
            output += (autoGenerated ? "*" : "") + m.getName() + "\n";
            return true;
        }
    }

    public void testNormalUsage()
    {
        // Set up some metrics to test..
        MetricSet set = new SimpleMetricSet("a", "foo", "");
        SummedDoubleValueMetric v1 = new SummedDoubleValueMetric("c", "foo", "", set);
        AveragedLongValueMetric v2 = new AveragedLongValueMetric("b", "", "", set);
        CountMetric v3 = new CountMetric("d", "bar", "", set);
        MetricSet set2 = new SimpleMetricSet("e", "bar", "", set);
        CountMetric v4 = new CountMetric("f", "foo", "", set2);

        // Give them some values
        v1.addValue(4.2);
        v2.addValue((long)8);
        v3.inc();
        v4.inc(3);

        // Check that we can register through registerMetric function too.
        CountMetric v5 = new CountMetric("g", "", "", null);
        set.registerMetric(v5);
        v5.inc(3);
        v5.dec();

        // Check that getMetric works, and doesn't return copy.
        AveragedLongValueMetric v2copy = (AveragedLongValueMetric)set.getMetric("b");
        assertNotNull(v2copy);
        v2copy.addValue((long)9);

        assertNull(set.getMetric("nonexisting"));
        assertNull(set.getMetric("non.existing"));

        // Check that paths are set
        MetricSet topSet = new SimpleMetricSet("top", "", "", null);
        topSet.registerMetric(set);

        assertEquals("a", set.getPath());
        assertEquals("a.c", v1.getPath());
        assertEquals("a.b", v2.getPath());
        assertEquals("a.d", v3.getPath());
        assertEquals("a.e", set2.getPath());
        assertEquals("a.e.f", v4.getPath());
        assertEquals("a.g", v5.getPath());
        assertEquals("a.b", v2copy.getPath());

        // Verify XML output. Should be in register order.
        assertEquals(
                "<a>\n\n" +
                        "  <c average=\"4.20\" last=\"4.20\" min=\"4.20\" max=\"4.20\" count=\"1\" total=\"4.20\"/>\n\n"    +
                        "  <b average=\"8.50\" last=\"9\" min=\"8\" max=\"9\" count=\"2\" total=\"17\"/>\n\n"  +
                        "  <d count=\"1\"/>\n\n" +
                        "  <e>\n"+
                        "    <f count=\"3\"/>\n" +
                        "  </e>\n\n"      +
                        "  <g count=\"2\"/>\n\n"+
                        "</a>\n", set.toXml(0,2));

        // Verify that visiting works. That you get all metrics if you answer
        // true to all sets, and that you don't get members of sets you answer
        // false to get.
        {
            TestMetricVisitor visitor = new TestMetricVisitor(2);
            set.visit(visitor, false);
            assertEquals("[a]\nc\nb\nd\n[e]\nf\ng\n", visitor.output);
        }
        {
            TestMetricVisitor visitor = new TestMetricVisitor(1);
            set.visit(visitor, false);
            assertEquals("[a]\nc\nb\nd\n[e]\ng\n", visitor.output);
        }
        {
            TestMetricVisitor visitor = new TestMetricVisitor(0);
            set.visit(visitor, false);
            assertEquals("[a]\n", visitor.output);
        }
    }

    class MyTimer extends Timer {
        long timeNow = 0;

        @Override
        long milliSecs() { return timeNow; }
    }

    @SuppressWarnings("rawtypes")
    public void testSumInSet() {
        MetricSet ms_a = new SimpleMetricSet("a", "", "", null);
        MyTimer timer = new MyTimer();
        timer.timeNow = 1;

        MetricManager manager = new MetricManager(timer);
        manager.registerMetric(ms_a);

        manager.takeSnapshots(1);

        SumMetric s_a = new SumMetric("sum", "", "", ms_a);
        MetricSet ms_b = new SimpleMetricSet("b", "", "", ms_a);
        s_a.addMetricToSum(ms_b);
        MetricSet ms_c = new SimpleMetricSet("c", "", "", ms_a);
        s_a.addMetricToSum(ms_c);

        SumMetric s_b_a = new SumMetric("sum", "", "", ms_b);
        SumMetric s_c_a = new SumMetric("sum", "", "", ms_c);

        AveragedDoubleValueMetric v1_b = new AveragedDoubleValueMetric("v1", "", "", ms_b);
        s_b_a.addMetricToSum(v1_b);
        AveragedDoubleValueMetric v3_b = new AveragedDoubleValueMetric("v3", "", "", ms_b);
        s_b_a.addMetricToSum(v3_b);

        AveragedDoubleValueMetric v1_c = new AveragedDoubleValueMetric("v1", "", "", ms_c);
        s_c_a.addMetricToSum(v1_c);
        AveragedDoubleValueMetric v2_c = new AveragedDoubleValueMetric("v2", "", "", ms_c);
        s_c_a.addMetricToSum(v2_c);

        v1_b.addValue(1.0);
        v3_b.addValue(2.0);
        v1_c.addValue(3.0);
        v2_c.addValue(4.0);

        SimpleMetricSet sms = (SimpleMetricSet)s_a.generateSum();
        ValueMetric av_sum = (ValueMetric)sms.getMetric("sum");
        ValueMetric av_1 = (ValueMetric)sms.getMetric("v1");
        ValueMetric av_2 = (ValueMetric)sms.getMetric("v2");
        ValueMetric av_3 = (ValueMetric)sms.getMetric("v3");

        assertEquals(10.0, av_sum.getDoubleValue("total"));
        assertEquals(4, av_sum.getLongValue("count"));
        assertEquals(4.0, av_1.getDoubleValue("total"));
        assertEquals(4.0, av_2.getDoubleValue("total"));
        assertEquals(2.0, av_3.getDoubleValue("total"));

        timer.timeNow = 301;
        manager.takeSnapshots(301);

        MetricSnapshot snapshot = manager.getMetricSnapshot(300);

        assertEquals("<snapshot name=\"5 minute\" from=\"301\" to=\"301\" period=\"300\">\n" +
                "\n" +
                "  <a>\n" +
                "    <sum>\n" +
                "      <sum average=\"2.50\" last=\"4.00\" min=\"1.00\" max=\"4.00\" count=\"4\" total=\"10.00\"/>\n" +
                "      <v1 average=\"2.00\" last=\"3.00\" min=\"1.00\" max=\"3.00\" count=\"2\" total=\"4.00\"/>\n" +
                "      <v3 average=\"2.00\" last=\"2.00\" min=\"2.00\" max=\"2.00\" count=\"1\" total=\"2.00\"/>\n" +
                "      <v2 average=\"4.00\" last=\"4.00\" min=\"4.00\" max=\"4.00\" count=\"1\" total=\"4.00\"/>\n" +
                "    </sum>\n" +
                "    <b>\n" +
                "      <sum average=\"1.50\" last=\"2.00\" min=\"1.00\" max=\"2.00\" count=\"2\" total=\"3.00\"/>\n" +
                "      <v1 average=\"1.00\" last=\"1.00\" min=\"1.00\" max=\"1.00\" count=\"1\" total=\"1.00\"/>\n" +
                "      <v3 average=\"2.00\" last=\"2.00\" min=\"2.00\" max=\"2.00\" count=\"1\" total=\"2.00\"/>\n" +
                "    </b>\n" +
                "    <c>\n" +
                "      <sum average=\"3.50\" last=\"4.00\" min=\"3.00\" max=\"4.00\" count=\"2\" total=\"7.00\"/>\n" +
                "      <v1 average=\"3.00\" last=\"3.00\" min=\"3.00\" max=\"3.00\" count=\"1\" total=\"3.00\"/>\n" +
                "      <v2 average=\"4.00\" last=\"4.00\" min=\"4.00\" max=\"4.00\" count=\"1\" total=\"4.00\"/>\n" +
                "    </c>\n" +
                "  </a>\n" +
                "\n" +
                "</snapshot>\n", snapshot.toXml(manager, "", 2));

        assertEquals("<snapshot name=\"1 hour\" from=\"0\" to=\"301\" period=\"3600\">\n" +
                "\n" +
                "  <a>\n" +
                "    <sum>\n" +
                "      <sum average=\"2.50\" last=\"4.00\" min=\"1.00\" max=\"4.00\" count=\"4\" total=\"10.00\"/>\n" +
                "      <v1 average=\"2.00\" last=\"3.00\" min=\"1.00\" max=\"3.00\" count=\"2\" total=\"4.00\"/>\n" +
                "      <v3 average=\"2.00\" last=\"2.00\" min=\"2.00\" max=\"2.00\" count=\"1\" total=\"2.00\"/>\n" +
                "      <v2 average=\"4.00\" last=\"4.00\" min=\"4.00\" max=\"4.00\" count=\"1\" total=\"4.00\"/>\n" +
                "    </sum>\n" +
                "    <b>\n" +
                "      <sum average=\"1.50\" last=\"2.00\" min=\"1.00\" max=\"2.00\" count=\"2\" total=\"3.00\"/>\n" +
                "      <v1 average=\"1.00\" last=\"1.00\" min=\"1.00\" max=\"1.00\" count=\"1\" total=\"1.00\"/>\n" +
                "      <v3 average=\"2.00\" last=\"2.00\" min=\"2.00\" max=\"2.00\" count=\"1\" total=\"2.00\"/>\n" +
                "    </b>\n" +
                "    <c>\n" +
                "      <sum average=\"3.50\" last=\"4.00\" min=\"3.00\" max=\"4.00\" count=\"2\" total=\"7.00\"/>\n" +
                "      <v1 average=\"3.00\" last=\"3.00\" min=\"3.00\" max=\"3.00\" count=\"1\" total=\"3.00\"/>\n" +
                "      <v2 average=\"4.00\" last=\"4.00\" min=\"4.00\" max=\"4.00\" count=\"1\" total=\"4.00\"/>\n" +
                "    </c>\n" +
                "  </a>\n" +
                "\n" +
                "</snapshot>\n", manager.getMetricSnapshot(3600, true).toXml(manager, "", 2));

        v1_b.addValue(2.0);
        v3_b.addValue(3.0);
        v1_c.addValue(4.0);
        v2_c.addValue(8.0);

        CountMetric c1_b = new CountMetric("cnt", "", "", ms_b);
        c1_b.inc(500);

        timer.timeNow = 601;
        manager.takeSnapshots(601);

        // THIS IS WRONG. See ticket
        assertEquals("<snapshot name=\"5 minute\" from=\"601\" to=\"601\" period=\"300\">\n" +
                "\n" +
                "  <a>\n" +
                "    <sum>\n" +
                "      <sum average=\"4.25\" last=\"8.00\" min=\"2.00\" max=\"8.00\" count=\"4\" total=\"17.00\"/>\n" +
                "      <v1 average=\"3.00\" last=\"4.00\" min=\"2.00\" max=\"4.00\" count=\"2\" total=\"6.00\"/>\n" +
                "      <v3 average=\"3.00\" last=\"3.00\" min=\"3.00\" max=\"3.00\" count=\"1\" total=\"3.00\"/>\n" +
                "      <v2 average=\"8.00\" last=\"8.00\" min=\"8.00\" max=\"8.00\" count=\"1\" total=\"8.00\"/>\n" +
                "      <cnt count=\"500\" average_change_per_second=\"1.67\"/>\n" +
                "    </sum>\n" +
                "    <b>\n" +
                "      <sum average=\"2.50\" last=\"3.00\" min=\"2.00\" max=\"3.00\" count=\"2\" total=\"5.00\"/>\n" +
                "      <v1 average=\"2.00\" last=\"2.00\" min=\"2.00\" max=\"2.00\" count=\"1\" total=\"2.00\"/>\n" +
                "      <v3 average=\"3.00\" last=\"3.00\" min=\"3.00\" max=\"3.00\" count=\"1\" total=\"3.00\"/>\n" +
                "      <cnt count=\"500\" average_change_per_second=\"1.67\"/>\n" +
                "    </b>\n" +
                "    <c>\n" +
                "      <sum average=\"6.00\" last=\"8.00\" min=\"4.00\" max=\"8.00\" count=\"2\" total=\"12.00\"/>\n" +
                "      <v1 average=\"4.00\" last=\"4.00\" min=\"4.00\" max=\"4.00\" count=\"1\" total=\"4.00\"/>\n" +
                "      <v2 average=\"8.00\" last=\"8.00\" min=\"8.00\" max=\"8.00\" count=\"1\" total=\"8.00\"/>\n" +
                "    </c>\n" +
                "  </a>\n" +
                "\n" +
                "</snapshot>\n", manager.getMetricSnapshot(300, false).toXml(manager, "", 2));

        assertEquals("<snapshot name=\"1 hour\" from=\"0\" to=\"601\" period=\"3600\">\n" +
                "\n" +
                "  <a>\n" +
                "    <sum>\n" +
                "      <sum average=\"3.38\" last=\"8.00\" min=\"1.00\" max=\"8.00\" count=\"8\" total=\"27.00\"/>\n" +
                "      <v1 average=\"2.50\" last=\"4.00\" min=\"1.00\" max=\"4.00\" count=\"4\" total=\"10.00\"/>\n" +
                "      <v3 average=\"2.50\" last=\"3.00\" min=\"2.00\" max=\"3.00\" count=\"2\" total=\"5.00\"/>\n" +
                "      <v2 average=\"6.00\" last=\"8.00\" min=\"4.00\" max=\"8.00\" count=\"2\" total=\"12.00\"/>\n" +
                "      <cnt count=\"500\" average_change_per_second=\"0.83\"/>\n" +
                "    </sum>\n" +
                "    <b>\n" +
                "      <sum average=\"2.00\" last=\"3.00\" min=\"1.00\" max=\"3.00\" count=\"4\" total=\"8.00\"/>\n" +
                "      <v1 average=\"1.50\" last=\"2.00\" min=\"1.00\" max=\"2.00\" count=\"2\" total=\"3.00\"/>\n" +
                "      <v3 average=\"2.50\" last=\"3.00\" min=\"2.00\" max=\"3.00\" count=\"2\" total=\"5.00\"/>\n" +
                "      <cnt count=\"500\" average_change_per_second=\"0.83\"/>\n" +
                "    </b>\n" +
                "    <c>\n" +
                "      <sum average=\"4.75\" last=\"8.00\" min=\"3.00\" max=\"8.00\" count=\"4\" total=\"19.00\"/>\n" +
                "      <v1 average=\"3.50\" last=\"4.00\" min=\"3.00\" max=\"4.00\" count=\"2\" total=\"7.00\"/>\n" +
                "      <v2 average=\"6.00\" last=\"8.00\" min=\"4.00\" max=\"8.00\" count=\"2\" total=\"12.00\"/>\n" +
                "    </c>\n" +
                "  </a>\n" +
                "\n" +
                "</snapshot>\n", manager.getMetricSnapshot(3600, true).toXml(manager, "", 2));

        AveragedDoubleValueMetric v4_c = new AveragedDoubleValueMetric("v4", "", "", ms_c);
        s_c_a.addMetricToSum(v4_c);

        v2_c.addValue(4.0);
        v4_c.addValue(12.0);
        c1_b.inc(3000);

        timer.timeNow = 901;
        manager.takeSnapshots(901);

        assertEquals("<snapshot name=\"5 minute\" from=\"901\" to=\"901\" period=\"300\">\n" +
                "\n" +
                "  <a>\n" +
                "    <sum>\n" +
                "      <sum average=\"8.00\" last=\"12.00\" min=\"4.00\" max=\"12.00\" count=\"2\" total=\"16.00\"/>\n" +
                "      <v1 average=\"0.00\" last=\"0\" count=\"0\" total=\"0\"/>\n" +
                "      <v3 average=\"0.00\" last=\"0\" count=\"0\" total=\"0\"/>\n" +
                "      <v2 average=\"4.00\" last=\"4.00\" min=\"4.00\" max=\"4.00\" count=\"1\" total=\"4.00\"/>\n" +
                "      <cnt count=\"3000\" average_change_per_second=\"10.00\"/>\n" +
                "      <v4 average=\"12.00\" last=\"12.00\" min=\"12.00\" max=\"12.00\" count=\"1\" total=\"12.00\"/>\n" +
                "    </sum>\n" +
                "    <b>\n" +
                "      <sum average=\"0.00\" last=\"0\" count=\"0\" total=\"0\"/>\n" +
                "      <v1 average=\"0.00\" last=\"0\" count=\"0\" total=\"0\"/>\n" +
                "      <v3 average=\"0.00\" last=\"0\" count=\"0\" total=\"0\"/>\n" +
                "      <cnt count=\"3000\" average_change_per_second=\"10.00\"/>\n" +
                "    </b>\n" +
                "    <c>\n" +
                "      <sum average=\"8.00\" last=\"12.00\" min=\"4.00\" max=\"12.00\" count=\"2\" total=\"16.00\"/>\n" +
                "      <v1 average=\"0.00\" last=\"0\" count=\"0\" total=\"0\"/>\n" +
                "      <v2 average=\"4.00\" last=\"4.00\" min=\"4.00\" max=\"4.00\" count=\"1\" total=\"4.00\"/>\n" +
                "      <v4 average=\"12.00\" last=\"12.00\" min=\"12.00\" max=\"12.00\" count=\"1\" total=\"12.00\"/>\n" +
                "    </c>\n" +
                "  </a>\n" +
                "\n" +
                "</snapshot>\n", manager.getMetricSnapshot(300, false).toXml(manager, "", 2));

        assertEquals("<snapshot name=\"1 hour\" from=\"0\" to=\"901\" period=\"3600\">\n" +
                "\n" +
                "  <a>\n" +
                "    <sum>\n" +
                "      <sum average=\"4.30\" last=\"12.00\" min=\"1.00\" max=\"12.00\" count=\"10\" total=\"43.00\"/>\n" +
                "      <v1 average=\"2.50\" last=\"4.00\" min=\"1.00\" max=\"4.00\" count=\"4\" total=\"10.00\"/>\n" +
                "      <v3 average=\"2.50\" last=\"3.00\" min=\"2.00\" max=\"3.00\" count=\"2\" total=\"5.00\"/>\n" +
                "      <v2 average=\"5.33\" last=\"4.00\" min=\"4.00\" max=\"8.00\" count=\"3\" total=\"16.00\"/>\n" +
                "      <cnt count=\"3500\" average_change_per_second=\"3.88\"/>\n" +
                "      <v4 average=\"12.00\" last=\"12.00\" min=\"12.00\" max=\"12.00\" count=\"1\" total=\"12.00\"/>\n" +
                "    </sum>\n" +
                "    <b>\n" +
                "      <sum average=\"2.00\" last=\"3.00\" min=\"1.00\" max=\"3.00\" count=\"4\" total=\"8.00\"/>\n" +
                "      <v1 average=\"1.50\" last=\"2.00\" min=\"1.00\" max=\"2.00\" count=\"2\" total=\"3.00\"/>\n" +
                "      <v3 average=\"2.50\" last=\"3.00\" min=\"2.00\" max=\"3.00\" count=\"2\" total=\"5.00\"/>\n" +
                "      <cnt count=\"3500\" average_change_per_second=\"3.88\"/>\n" +
                "    </b>\n" +
                "    <c>\n" +
                "      <sum average=\"5.83\" last=\"12.00\" min=\"3.00\" max=\"12.00\" count=\"6\" total=\"35.00\"/>\n" +
                "      <v1 average=\"3.50\" last=\"4.00\" min=\"3.00\" max=\"4.00\" count=\"2\" total=\"7.00\"/>\n" +
                "      <v2 average=\"5.33\" last=\"4.00\" min=\"4.00\" max=\"8.00\" count=\"3\" total=\"16.00\"/>\n" +
                "      <v4 average=\"12.00\" last=\"12.00\" min=\"12.00\" max=\"12.00\" count=\"1\" total=\"12.00\"/>\n" +
                "    </c>\n" +
                "  </a>\n" +
                "\n" +
                "</snapshot>\n", manager.getMetricSnapshot(3600, true).toXml(manager, "", 2));
    }

} // metrics
