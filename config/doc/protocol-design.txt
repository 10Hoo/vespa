# Config protocol

## Introduction

This document describes the low-level config protocol based on fnet/rpc.

## Overview of the protocol

The protocol is stateless and similiar to HTTP GET and other REST
APIs, but implemented as remote procedure calls (RPC).  A client
performs a method call get(), and a server returns a response if the
config has changed since the last time get() was called, or waits a
specified time before returning (unless the config changes before the
timeout is reached, in case it returns immediately). Since the
protocol is stateless, it is easy to use more than one config server
to serve config.  It is also possible to use a (cacheing) proxy
between client and server.

The figure below shows a simplified view of how an application *App*
uses the config library API to subscribe to a config.  The protocol is
shown as *get()* call and *ret()* responses.  Optionally, a proxy can 
be used between client and the server.

<img src='rpc-config-protocol.png' alt='RPC config protocol' />

In the figure above, the first parameter *X* is a designator for the
config to get, the second parameter is a generation number and the
third parameter *T* is a server timeout.

The server (or proxy, if the client is using one) will generate a
response immediately if the config *X* has another (higher) generation
number than the one requested.  If not, the server will create a timer
with timeout *T* and respond when the timer expires or the requested
config changes, whatever comes first.

If the response was generated because the config changed, the config
payload will be included in the response and a change flag set to mark
that the response contains changed config.  Else the change flag will
not be set (and no config payload included in the response).

The client timeout (how long the client waits for an answer before
giving up), should be longer than the server timeout *T*.


## Implementation

The implementation of get() is an RPC method called getConfig() with
the following signature:

	  getConfig(String configId, String defName, String defVersion, String defMD5, String configMD5, long timeout)

and the parameters:

* *configId* - config id
* *defName* - config definition name
* *defVersion* - config definition version
* *defMD5* - config definition md5sum
* *configMD5* - config md5sum (the md5sum of the config payload)
* *timeout* - server timeout

The fifth parameter, the config md5sum, is used instead of a
generation number.  If a config is found, the md5sum of the config
payload will be returned in the response, so that subsequent calls to
getConfig() will use this new md5sum as *configMD5*.  When getting
config the first time, this parameter will be an empty string.


The return parameters are:

	   String configId, String defName, String defVersion, String defMD5, String configMD5, int changed, long generation, String payload)

with the first 5 parameters being the same as the one in the
request. The rest are:

* *changed* - a flag the will have a value of 1 if there is a config
   *payload* in the response, or 0 else.
* *generation* - generation when the config was last changed (in milliseconds since 1970).
* *payload* - config payload.  Will only have a value if *changed* is 1.

The payload is the same as in the previous version of this protocol.

The *generation* parameter can be used to check how old the config
is. In case of getting a new payload (*changed* is 1, this can be used
to check that the config returned has a newer timstamp thatn the last
returned from a config source (this
